package parse

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"go/types"
	"io/ioutil"
	"os"
	"path/filepath"
	"reflect"
	"strings"
)

type Type struct {
	Literal string
	Structs []string
}
type ClientStruct struct {
	Packages []Package
	Edges    []Edge
}
type Package struct {
	Name  string
	Files []File
}
type File struct {
	Name    string
	Structs []Struct
}
type Struct struct {
	Name   string
	Fields []Field
}
type Field struct {
	Name string
	Type Type
}
type Method struct {
	Name       string
	ReturnType []Type
}
type Node struct {
	FieldTypeName    string
	StregewgeuctName string
	PackageName      string
	FileName         string
}

func GetStructsFile(fset *token.FileSet, f *ast.File, fname string, packageName string) (File, []Edge) {
	structs := []Struct{}
	edges := []Edge{}
	for _, d := range f.Decls {
		if g, ok := d.(*ast.GenDecl); ok && g.Tok == token.TYPE {
			for _, s := range g.Specs {
				if ts, ok := s.(*ast.TypeSpec); ok {
					if st, ok := ts.Type.(*ast.StructType); ok {
						fields := []Field{}
						for _, field := range st.Fields.List {
							for _, name := range field.Names {
								var buf bytes.Buffer
								if err := format.Node(&buf, fset, field.Type); err != nil {
									panic(err)
								}
								stname, toNodes := GetTypes(field.Type, packageName)
								fieldtype := Type{Literal: string(buf.Bytes()), Structs: stname}
								fi := Field{Name: name.Name, Type: fieldtype}
								fields = append(fields, fi)
								for _, toNode := range toNodes {
									edges = append(edges, Edge{From: &Node{FieldTypeName: name.Name, StructName: ts.Name.Name, FileName: fname, PackageName: packageName}, To: toNode})
								}
							}
						}
						structs = append(structs, Struct{Name: ts.Name.Name, Fields: fields})
					}
				}
			}
		}
	}
	return File{Name: fname, Structs: structs}, edges
}
func GetFileName(toNode *Node, pkgs []Package) string {
	for _, pkg := range pkgs {
		if pkg.Name == toNode.PackageName {
			for _, file := range pkg.Files {
				for _, st := range file.Structs {
					if st.Name == toNode.StructName {
						return file.Name
					}
				}
			}
		}
	}
	fmt.Println("Matching file not found for struct", toNode.StructName, "(probably a library package)")
	return ""
}
func getPackagesEdgesDirName(path string, fset *token.FileSet) ([]Package, []Edge, map[string]*ast.Package) {
	var packages []Package
	var edges []Edge
	packagemap, err := parser.ParseDir(fset, path, nil, 0)
	if err != nil {
		panic(err)
	}
	for packagename, packageval := range packagemap {
		if packagename != "main" {
			files := []File{}
			for fname, f := range packageval.Files {
				newfile, newedges := GetStructsFile(fset, f, fname, packagename)
				files = append(files, newfile)
				edges = append(edges, newedges...)
			}
			packages = append(packages, Package{Name: packagename, Files: files})
		}
	}
	return packages, edges, packagemap
}
func GetStructsDirName(path string) (*ClientStruct, map[string]*ast.Package) {
	directories := []string{}
	packages := []Package{}
	edges := []Edge{}
	pkgmap := map[string]*ast.Package{}
	fset := token.NewFileSet()
	directories = []string{path}
	filepath.Walk(path, func(path string, f os.FileInfo, err error) error {
		if f.IsDir() {
			if !strings.Contains(path, "app") {
				directories = append(directories, path)
			}
		}
		return nil
	})
	fmt.Printf("Process %d directories\n", len(directories))
	for _, directory := range directories {
		newpackages, newedges, newpkgmap := getPackagesEdgesDirName(directory, fset)
		packages = append(packages, newpackages...)
		edges = append(edges, newedges...)
		for k, v := range newpkgmap {
			pkgmap[k] = v
		}
	}
	validedges := []Edge{}
	for _, edge := range edges {
		if name := GetFileName(edge.To, packages); name != "" {
			edge.To.FileName = name
			validedges = append(validedges, edge)
		}
	}
	return &ClientStruct{Packages: packages, Edges: validedges}, pkgmap
}
func isPrimitive(name string) bool {
	for _, basicType := range types.Typ {
		if name == basicType.Name() {
			return true
		}
	}
	if name == "error" || name == "byte" {
		return true
	}
	return false
}
func GetType(node *ast.Ident, packageName string) (string, *Node) {
	var toNode *Node
	name := node.Name
	if !isPrimitive(name) {
		toNode = &Node{StructName: name, PackageName: packageName}
	}
	return name, toNode
}
func GetTypes(node ast.Expr, packageName string) ([]string, []*Node) {
	switch node.(type) {
	case *ast.Ident:
		toNodes := []*Node{}
		name, toNode := GetType(node.(*ast.Ident), packageName)
		if toNode != nil {
			toNodes = append(toNodes, toNode)
		}
		return []string{name}, toNodes
	case *ast.SelectorExpr:
		xPackageName := node.(*ast.SelectorExpr).X.(*ast.Ident).Name
		toNodes := []*Node{}
		name, toNode := GetType(node.(*ast.SelectorExpr).Sel, xPackageName)
		if toNode != nil {
			toNodes = append(toNodes, toNode)
		}
		return []string{name}, toNodes
	case *ast.ArrayType:
		return GetTypes(node.(*ast.ArrayType).Elt, packageName)
	case *ast.MapType:
		return GetTypes(node.(*ast.MapType).Key, packageName)
	case *ast.StarExpr:
		return GetTypes(node.(*ast.StarExpr).X, packageName)
	case *ast.FuncType:
		return []string{"TODO"}, nil
	case *ast.InterfaceType:
		return []string{"TODO"}, nil
	case *ast.ChanType:
		return []string{"TODO"}, nil
	default:
		fmt.Println(reflect.TypeOf(node))
		panic("Need to cover all Type Exprs")
	}
}
func WriteClientPackages(dirpath string, pkgs map[string]*ast.Package, clientpackages []Package) {
	for _, clientpackage := range clientpackages {
		for _, clientfile := range clientpackage.Files {
			packagename := clientpackage.Name
			packageast := pkgs[packagename]
			f := packageast.Files[clientfile.Name]
			if f == nil {
				fmt.Println("Couldn't find", packagename, packageast.Files, clientfile.Name)
			}
			f = clientFileToAST(clientfile, f)
			writeFileAST(clientfile.Name, f)
		}
	}
}
func writeFileAST(filepath string, f *ast.File) {
	fset := token.NewFileSet()
	var buf bytes.Buffer
	if err := format.Node(&buf, fset, f); err != nil {
		panic(err)
	}
	err := ioutil.WriteFile(filepath+".new", buf.Bytes(), 0644)
	if err != nil {
		panic(err)
	}
}
func clientFileToAST(clientfile File, f *ast.File) *ast.File {
	newdecls := []ast.Decl{f.Decls[0]}
	f.Decls = removeStructDecls(f.Decls)
	newstructs := clientFileToDecls(clientfile)
	newdecls = append(newdecls, newstructs...)
	newdecls = append(newdecls, f.Decls[1:]...)
	f.Decls = newdecls
	return f
}
func clientFileToDecls(clientfile File) []ast.Decl {
	decls := []ast.Decl{}
	for _, clientstruct := range clientfile.Structs {
		decl := &ast.GenDecl{Tok: token.TYPE}
		fieldList := []*ast.Field{}
		for _, clientfield := range clientstruct.Fields {
			parsedtype, err := parser.ParseExpr(clientfield.Type.Literal)
			if err != nil {
				panic(err)
			}
			field := ast.Field{Names: []*ast.Ident{&ast.Ident{Name: clientfield.Name}}, Type: parsedtype}
			fieldList = append(fieldList, &field)
		}
		fields := &ast.FieldList{List: fieldList}
		structExpr := &ast.StructType{Struct: token.NoPos, Fields: fields}
		spec := ast.TypeSpec{Name: ast.NewIdent(clientstruct.Name), Type: structExpr}
		decl.Specs = append(decl.Specs, &spec)
		decls = append(decls, decl)
	}
	return decls
}
func removeStructDecls(decls []ast.Decl) []ast.Decl {
	newdecls := []ast.Decl{}
	for _, decl := range decls {
		if g, ok := decl.(*ast.GenDecl); !ok || g.Tok != token.TYPE {
			newdecls = append(newdecls, decl)
		}
	}
	return newdecls
}
